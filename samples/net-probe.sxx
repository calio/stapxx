#!/usr/bin/env stap++
#
#   sample output: [1]1392083169165228 [client]  sendto 9          client 0xffff88007289c680, server 0xffff88007289dd40 =8008
#   explaination:  [session id]timestamp(us) [client side or server side]  syscall, target fd, client socket addr, server socket addr
@use kernel.socket

global id_map
global id_closeing_map
global counter = 0

# 1. check pid
# 2. check if it is unix socket --> sk
# 3. check if it has the right path
#

function condition1(pid)
{
    if (pid() == pid) {
        return 1
    }
    return 0
}

function condition2(pid, fd)
{
    if (pid() == pid) {
        socket = sockfd_lookup(fd)
        if (socket != 0) {
            sk = get_sk(socket)
            if (is_unix(sk) == 1) {
                return sk
            }
        }
    }
    return 0
}

function condition3(pid, fd, is_client)
{
    if (pid() == pid) {
        socket = sockfd_lookup(fd)
        if (socket != 0) {
            sk = get_sk(socket)
            if (is_unix(sk) == 1) {
                if (is_target_sock(sk, is_client) == 1) {
                    return sk
                }
            }
        }
    }
    return 0
}

function is_unix(sk)
{
    if (sk == 0) {
        return 0
    }

    $*sk := @cast(sk, "struct sock", "kernel")
    if ($*sk->__sk_common->skc_family == 1) {
        // AF_UNIX
        return 1
    } else {
        return 0
    }
}

function is_target_sock(sk, is_client)
{
    if (sk == 0) {
        return 0
    }

    if (is_client == 1) {
        sk = get_peer(sk)
    }

    if (id_map[sk]) {
        return 1
    } else {
        return 0
    }
}


function get_sk(socket)
{
    if (socket == 0) {
        return 0
    }
    $*socket := @cast(socket, "struct socket", "kernel")
    u = $*socket->sk

    return u
}

function get_peer(u)
{
    if (u == 0) {
        return 0
    }
    $*u := @cast(u, "struct unix_sock", "kernel")
    other = $*u->peer
    return other
}

function get_id(sock)
{
    if (id_map[sock]) {
        return id_map[sock]
    } else {
        id_map[sock] = counter
        counter++
        return id_map[sock]
    }
}

function should_close(u)
{
    if (id_closeing_map[u] == 1) {
        delete(id_closeing_map[u])
        return 1
    } else {
        id_closeing_map[u] = 1
        return 0
    }
}

function del_id(sock)
{
    delete(id_map[sock])
}


function tlog(action, fd, srv_sock, cli_sock)
{
    printf("[%3d]%d %s\t %3d\t\tclient %p, server %p\n", get_id(srv_sock), gettimeofday_us(), action, fd, srv_sock, cli_sock)
}
function tlogr(action, fd, srv_sock, cli_sock, rval)
{
    printf("[%3d]%d %s\t %3d\t\tclient %p, server %p =%d\n", get_id(srv_sock), gettimeofday_us(), action, fd, srv_sock, cli_sock, rval)
}

probe syscall.connect.return {
    sk = condition2($^arg_con_pid, $fd)
    if (sk != 0) {
        $*addr_un := @cast($uservaddr, "struct sockaddr_un", "kernel")
        path = user_string($*addr_un->sun_path)
        if (strlen(path) != 0 && isinstr("$^arg_file", path) == 1) {
            if ($return == -1) {
                printf("connect failed on %d\n", $fd)
            } else {
                other = get_peer(sk)
                tlogr("[client]  connect", $fd, other, sk, $return)
            }
        }
    }
}

probe syscall.accept.return {
    if (condition1($^arg_acc_pid) == 1) {
        socket_acc = sockfd_lookup($fd)
        if (socket_acc != 0) {
            path = socket_unix_stream_file_name(socket_acc)
            if (strlen(path) != 0 && isinstr("$^arg_file", path) == 1) {
                if ($return > 0) {
                    socket = sockfd_lookup($return)
                    if (socket != 0) {
                        sk = get_sk(socket)
                        if (sk != 0) {
                            other = get_peer(sk)
                            tlogr("[server]  accept", $fd, sk, other, $return)
                        }
                    }
                } else {
                    printf("accept failed on %d\n", $fd)
                }
            }
        }
    }
}

probe syscall.sendto.return {
    sk = condition3($^arg_con_pid, $fd, 1)
    if (sk != 0) {
        other = get_peer(sk)
        tlogr("[client]  sendto", $fd, other, sk, $return)
    }
}

probe syscall.read.return {
    sk = condition3($^arg_acc_pid, $fd, 0)
    if (sk != 0) {
        other = get_peer(sk)
        tlogr("[server]  read", $fd, sk, other, $return)
    }
}

probe syscall.close {
    if (pid() == $^arg_acc_pid) {
        socket = sockfd_lookup($fd)
        if (socket != 0) {
            sk = get_sk(socket)
            if (is_target_sock(sk, 0) == 1) {
                other = get_peer(sk)
                tlog("[server]  close", $fd, sk, other)
                if (should_close(sk) == 1) {
                    del_id(sk)
                }
            }
        }
    } else if (pid() == $^arg_con_pid) {
        socket = sockfd_lookup($fd)
        if (socket != 0) {
            sk = get_sk(socket)
            if (is_target_sock(sk, 1) == 1) {
                other = get_peer(sk)
                tlog("[client]  close", $fd, other, sk)
                if (should_close(other) == 1) {
                    del_id(other)
                }
            }
        }
    }
}

probe begin {
    printf("start probing nginx(%d), tlogfwdr(%d)\n", $^arg_con_pid,
            $^arg_acc_pid)
}
